- test_serde tests may not be completely correct - need to review
- Remember to remove Default on all structs - needed for initial draft implementation of fhir_macro
- Thinking that what we have for PreciseDecimal is overkill and that rust_decimal should be able to handle the preservation of trailing zeros - e.g. 3.0000
- Need to figure out how to support extensions on primitives (or any json _ attribute) and placement into the extension Vec.
- Need to improve the deserialize/serialze/deserialze test - it's currently only checking ::Value
- Need to add resourceType as an attribute to all resources
- I can use a Custom Derive Macro, but I'm unsure what output it should have to send to the evaluator?
- Change the form of the evaluator to:  expr:Expression, fhir_resources: Array(Resources), base:Expression, env_variables (HashMap(String, String), model (r4) ??, options (struct 
- Improve the tests and evaluator to take the input and test the output against the result value in the xml file.
- Investigate the tests in https://github.com/FHIR/fhir-test-cases - are the fhirpath tests different for each FHIR version?
- Write README.md for the root - homepage!
- Write README.md for fhir_gen
- Write README.md for hfs
- Write README.md for fhir
- Write README.md for fhirpath
- Is there a fhir path validator endpoint, and an apply?
- The cycle detection is over Box'ing types.  It only needs to be done on one, but not the other. e.g. Reference and Identifier - future item - Likely need a priority element to 
  decide - could be helpful too in the future when we need to use it for Cassandra table separation
- Temporarily using strings for Date, DateTime, etc.  After we can prove parsing works, we will go back and code these as proper types.
- Document: export RUST_MIN_STACK=8388608
- Document: Build process:
      cargo build --features R4,R4B,R5,R6
      ./target/debug/fhir_gen --all
      cargo test --features R4,R4B,R5,R6


