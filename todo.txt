- FHIRPath - test against test files
- Test to see if invalid attributes are allowed/disallowed?
- R6 tests need help - Integer64 issues in comparison because we download them each time, so might need an exclusion list for R6
- Search for SLM TODO - need to change the others I think
- Need to add resourceType as an attribute to all resources
- I can use a Custom Derive Macro, but I'm unsure what output it should have to send to the evaluator?
- Change the form of the evaluator to:  expr:Expression, fhir_resources: Array(Resources), base:Expression, env_variables (HashMap(String, String), model (r4) ??, options (struct 
- Improve the tests and evaluator to take the input and test the output against the result value in the xml file.
- Investigate the tests in https://github.com/FHIR/fhir-test-cases - are the fhirpath tests different for each FHIR version?
- Write README.md for the root - homepage!
- Write README.md for fhir_gen
- Write README.md for hfs
- Write README.md for fhir
- Write README.md for fhirpath
- Is there a fhir path validator endpoint, and an apply?
- The cycle detection is over Box'ing types.  It only needs to be done on one, but not the other. e.g. Reference and Identifier - future item - Likely need a priority element to 
  decide - could be helpful too in the future when we need to use it for Cassandra table separation
- Temporarily using strings for Date, DateTime, etc.  After we can prove parsing works, we will go back and code these as proper types.
- Document: export RUST_MIN_STACK=8388608
- Document: ldd install and .cargo/config.toml for both mac and pc. pc requires 'sudo apt install clang lld'
- Document: Build process:
      cargo build --features R4,R4B,R5,R6
      ./target/debug/fhir_gen --all
      cargo test --features R4,R4B,R5,R6


# FHIRPath Implementation Todo List

This document outlines the action plan for implementing remaining FHIRPath functionality based on the failing tests in the r4_tests.rs file.

## 1. Type System and Type Operations

### 1.1. Fix `is()` Function for Types
- Implement support for `.is(TypeName)` pattern
- Fix the `.is()` function to properly accept a type name parameter
- Fix error message "is() function requires a string type name, got Empty"
- Fix tests like `true.is(Boolean)`, `1.is(Integer)`, etc.
- Add support for both qualified (System.Boolean) and unqualified (Boolean) names

### 1.2. Fix `as()` Function for Type Casting
- Implement support for `.as(TypeName)` pattern
- Fix the `.as()` function to properly accept a type name parameter
- Implement operator syntax: `Observation.value as Quantity`
- Fix specific tests like `(Observation.value as Quantity).unit`

### 1.3. Implement Type Reflection Improvements
- Fix `type()` function to work with primitives in FHIR resources
- Make `type()` return proper namespace and name for resources
- Fix failures like `Patient.active.type().namespace = 'FHIR'`
- Fix failures like `Patient.active.type().name = 'boolean'`

### 1.4. Fix Resource Type Checking
- Enhance resource type checking with `Patient.is(Patient)` type checks
- Implement proper comparison between resource types
- Fix `Patient.ofType(Patient).type().name` functionality

## 2. Polymorphic Access / Choice Elements

### 2.1. Fix Polymorphic Element Resolution
- Fix `Observation.value.unit` to properly access the polymorphic choice field
- Ensure polymorphic access works for all property paths
- Fix failing tests like `Observation.value.unit` to return "lbs"

### 2.2. Fix Polymorphic Type Checking
- Fix `Observation.value.is(Quantity)` to correctly identify type
- Fix `Observation.value.is(Period).not()` to work correctly
- Update polymorphic_access.rs to handle type checking properly

### 2.3. Fix Polymorphic Casting
- Fix `Observation.value.as(Quantity).unit` to properly return the unit
- Fix `Observation.value.as(Period).start` to return empty for wrong type

## 3. Date/Time Operations

### 3.1. Fix Date/Time Type Checking
- Fix type checks for date/time literals: `@2015.is(Date)`, `@2015-02T.is(DateTime)`
- Implement proper type identification for all date forms

### 3.2. Fix Date/Time Comparison
- Fix date/time equality testing: `@2012-04-15T15:30:31 = @2012-04-15T15:30:31.0`
- Fix timezone-aware comparisons: `@2017-11-05T01:30:00.0-04:00 = @2017-11-05T00:30:00.0-05:00`
- Fix date/time and date comparisons: `@2012-04-15 = @2012-04-15T10:00:00`
- Fix comparisons with today()/now(): `Patient.birthDate < today()`

### 3.3. Fix Date/Time Precision Handling
- Fix millisecond precision comparisons: `@2018-03-01T10:30:00 = @2018-03-01T10:30:00.0`
- Implement proper comparison for different precision date/times

## 4. Collection Functions and Navigation

### 4.1. Fix Collection Navigation
- Fix nested collection resolution like `Patient.name.given`
- Fix context issues with expressions like `Patient.name.skip(1).given`
- Ensure first()/last()/tail() work properly with `.given` navigation

### 4.2. Fix Collection Functions
- Fix where() function: `Patient.name.where(given = 'Jim').count() = 1`
- Fix select() function: `Patient.name.select(given).count() = 5`
- Fix contextual variables like $this: `Patient.name.given.where(substring($this.length()-3) = 'ter')`

### 4.3. Fix Repeat, Children, and Descendants
- Fix repeat() function: `ValueSet.expansion.repeat(contains).count() = 10`
- Fix descendants(): `Questionnaire.descendants().linkId.distinct().count() = 10`
- Fix children(): `Questionnaire.children().code.count() = 2`

## 5. Quantity Handling and Unit Conversion

### 5.1. Fix Quantity Comparison
- Implement unit conversion for comparisons: `4.0000 'g' = 4000.0 'mg'`
- Add support for time unit conversions: `7 days = 1 week`
- Fix quantity equivalence: `4 'g' ~ 4040 'mg'`

### 5.2. Fix Quantity Operations
- Fix quantity arithmetic: `2.0 'cm' * 2.0 'm' = 0.040 'm2'`
- Fix division with units: `4.0 'g' / 2.0 'm' = 2 'g/m'`
- Fix toString() on quantities: `1 week.toString()` should return `1 '{week}'`

### 5.3. Implement toQuantity()
- Fix toQuantity() function to properly convert strings to quantities
- Fix `'1 day'.toQuantity() = 1 '{day}'`

## 6. Extension Support

### 6.1. Fix Extension Resolution
- Fix extension resolution for primitive types: `Patient.birthDate.extension('http://hl7.org/fhir/StructureDefinition/patient-birthTime').exists()`
- Fix extension resolution with environment variables: `Patient.birthDate.extension(%`ext-patient-birthTime`).exists()`

## 7. General Arithmetic and Functionality

### 7.1. Fix Division and Precision
- Fix division precision: `1.2 / 1.8 = 0.66666667`
- Fix approximate equivalence: `1.2 / 1.8 ~ 0.67`

### 7.2. Fix String Operations
- Fix empty() check for substring: `'12345'.substring(25).empty()`
- Fix unicode handling: `'P\u0065ter'` should equal `'Peter'`

### 7.3. Fix Aggregate Function
- Fix aggregate() function: `(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 0) = 45`
- Ensure aggregate() handles variables properly

## 8. Context and Environment

### 8.1. Fix Context Resolution
- Fix context handling: `birthDate` should evaluate to a boolean
- Fix backtick expressions: ``` `Patient`.name.`given` ```

## Implementation Approach

For each area:
1. Identify the core issue in the implementation
2. Implement fixes without hardcoding test cases
3. Add appropriate unit tests
4. Update the README.md with accurate progress

## Prioritized Implementation Order

1. Type System and Is/As Operations (most failures)
2. Polymorphic Access (critical for FHIR)
3. Collection Navigation (affects many tests)
4. Date/Time Operations (significant number of failures)
5. Quantity Handling (complex but important)
6. Extension Support (specific to FHIR)
7. General Arithmetic and Functions (polish)
