{
  "constant_types.json": {
    "tests": [
      {
        "name": "base64Binary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "code",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "date",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "dateTime",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "decimal",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "id",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "instant",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "oid",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "positiveInt",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "time",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "unsignedInt",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "uri",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "url",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "uuid",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_join.json": {
    "tests": [
      {
        "name": "join with comma",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "join with empty value",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "join with no value - default to no separator",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_boundary.json": {
    "tests": [
      {
        "name": "decimal lowBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "decimal highBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "datetime lowBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "datetime highBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "date lowBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "date highBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "time lowBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "time highBoundary",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "logic.json": {
    "tests": [
      {
        "name": "filtering with 'and'",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "filtering with 'or'",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "filtering with 'not'",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fhirpath.json": {
    "tests": [
      {
        "name": "one element",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "two elements + first",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "collection",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "index[0]",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "index[1]",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "out of index",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "exists",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "nested exists",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "string join",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "string join: default separator",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "basic.json": {
    "tests": [
      {
        "name": "basic attribute",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "boolean attribute with false",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "two columns",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "two selects with columns",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where - 1",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where - 2",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where returns non-boolean for some cases",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where as expr - 1",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where as expr - 2",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "select & column",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "column ordering",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "collection.json": {
    "tests": [
      {
        "name": "fail when 'collection' is not true",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "collection = true",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "collection = false relative to forEach parent",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "collection = false relative to forEachOrNull parent",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "validate.json": {
    "tests": [
      {
        "name": "empty",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "missing resource",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "wrong fhirpath",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "wrong type in forEach",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where with path resolving to not boolean",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "view_resource.json": {
    "tests": [
      {
        "name": "only pts",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "only obs",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "resource not specified",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_oftype.json": {
    "tests": [
      {
        "name": "select string values",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "select integer values",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_extension.json": {
    "tests": [
      {
        "name": "simple extension",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "nested extension",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_first.json": {
    "tests": [
      {
        "name": "table level first()",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "table and field level first()",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "combinations.json": {
    "tests": [
      {
        "name": "select",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "column + select",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "sibling select",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "sibling select inside a select",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "column + select, with where",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "unionAll + forEach + column + select",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_reference_keys.json": {
    "tests": [
      {
        "name": "getReferenceKey result matches getResourceKey without type specifier",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "getReferenceKey result matches getResourceKey with right type specifier",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "getReferenceKey result matches getResourceKey with wrong type specifier",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "constant.json": {
    "tests": [
      {
        "name": "constant in path",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "constant in forEach",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "constant in where element",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "constant in unionAll",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "integer constant",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "boolean constant",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "accessing an undefined constant",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "incorrect constant definition",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fn_empty.json": {
    "tests": [
      {
        "name": "empty names",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "fhirpath_numbers.json": {
    "tests": [
      {
        "name": "add observation",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "union.json": {
    "tests": [
      {
        "name": "basic",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "unionAll + column",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "duplicates",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "empty results",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "empty with forEachOrNull",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEachOrNull and forEach",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "nested",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "one empty operand",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "column mismatch",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "column order mismatch",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "foreach.json": {
    "tests": [
      {
        "name": "forEach: normal",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEachOrNull: basic",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach: empty",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach: two on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach: two on the same level (empty result)",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEachOrNull: null case",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach and forEachOrNull on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "nested forEach",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "nested forEach: select & column",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEachOrNull & unionAll on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach & unionAll on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEach & unionAll & column & select on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "forEachOrNull & unionAll & column & select on the same level",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  },
  "where.json": {
    "tests": [
      {
        "name": "simple where path with result",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path with no results",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path with greater than inequality",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path with less than inequality",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "multiple where paths",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path with an 'and' connector",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path with an 'or' connector",
        "result": {
          "passed": true,
          "reason": null
        }
      },
      {
        "name": "where path that evaluates to true when empty",
        "result": {
          "passed": true,
          "reason": null
        }
      }
    ]
  }
}